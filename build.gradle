plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'spring'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'//웹과 관련된 기능을 지원
    compileOnly 'org.projectlombok:lombok' //반복적인 코드 작성을 줄여주는 도구. Getter/Setter, equals, hashCode 등의 롬복 메서드를 자동으로 생성
    annotationProcessor 'org.projectlombok:lombok'

    //DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'//JPA(Java Persistence API)를 통해 데이터베이스를 쉽게 다룰 수 있음.
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'//JDBC를 사용해 데이터베이스를 처리하는 작업을 쉽게 할 수 있습니다.
    runtimeOnly 'com.mysql:mysql-connector-j' // MySQL 데이터베이스와 연결하기 위한 JDBC 드라이버
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'//redis 사용 위함
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' //queryDsl 사용 위한 spring 3.x의 gradle
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" //Q클래스 생성
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" //다양한 표준 어노테이션(@PostConstruct, @PreDestroy, @Resource 등)을 제공
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" //엔티티 클래스와 데이터베이스 매핑을 위한 어노테이션(@Entity, @Table, @Id, @Column 등), 트랜젝션 기능을 제공합니다.

    //security
    implementation "org.springframework.boot:spring-boot-starter-security"

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.5' //JWT 생성/서명/검증/클레임 설정 등을 위한 인터페이스 및 클래스 제공
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.5' //JWT api에서 정의된 인터페이스의 실제 구현체 제공
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.5' //JWT를 JSON으로 처리하기 위한 Jackson 라이브러리 제공

    //webSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test' //테스트를 위한 라이브러리입니다. 통합 테스트, 단위 테스트, 보안 테스트 등을 지원
    testImplementation 'org.springframework.security:spring-security-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools' //개발자 생산성을 높이기 위해 제공되는 Spring Boot의 개발 도구 모음
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // JUnit 5 테스트 플랫폼의 런처를 포함하는 의존성 선언
    implementation 'org.springframework.boot:spring-boot-starter-validation' //Spring Boot의 스타터 중 하나로, 프로젝트에 데이터 유효성 검사를 위한 필요한 라이브러리를 포함

    //swagger 설정
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    //Data Transfer Protocol
    implementation 'org.springframework.boot:spring-boot-starter-mail'//Spring Mail을 프로젝트에 추가

    //s3 연결 위한 gradle
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // 환경변수
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    //faker
    implementation 'net.datafaker:datafaker:2.3.1' //최신 버전
}

tasks.named('test') {
	useJUnitPlatform()
}
